/* Combined Garage Management System
   Merges the Parking System, Fine Management, and Garage Sorting by name.
   Written by: Joseph Z.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

/* ================= Fine Management (BST) ================= */
typedef struct FineNode {
    char name[26];      // Owner's name
    int fine;           // Total fine amount
    struct FineNode *left, *right;
} FineNode;

/* Fine BST Function Prototypes */
FineNode* fineInsert(FineNode* root, char* name, int fine, int* depth);
FineNode* fineSearch(FineNode* root, char* name, int* depth);
int fineHeight(FineNode* root);
void calcAverageFine(FineNode* root, int* totalFine, int* totalOwners);
int calcTotalBelowFine(FineNode* root, char* name);
void freeFineTree(FineNode* root);
FineNode* fineDelete(FineNode* root, char* name);
FineNode* fineFindNode(FineNode* current_ptr, char* name);
FineNode* fineParent(FineNode* root, FineNode* node);
int isLeafFine(FineNode* node);
int hasOnlyLeftChildFine(FineNode* node);
int hasOnlyRightChildFine(FineNode* node);
FineNode* fineMaxVal(FineNode* root);

/* Fine BST Function Implementations */
FineNode* fineInsert(FineNode* root, char* name, int fine, int* depth) {
    if (root == NULL) {
        FineNode* newNode = (FineNode*)malloc(sizeof(FineNode));
        strcpy(newNode->name, name);
        newNode->fine = fine;
        newNode->left = newNode->right = NULL;
        return newNode;
    }
    (*depth)++;
    if (strcmp(name, root->name) < 0)
        root->left = fineInsert(root->left, name, fine, depth);
    else
        root->right = fineInsert(root->right, name, fine, depth);
    return root;
}

FineNode* fineSearch(FineNode* root, char* name, int* depth) {
    if (root == NULL)
        return NULL;
    if (strcmp(name, root->name) == 0)
        return root;
    (*depth)++;
    if (strcmp(name, root->name) < 0)
        return fineSearch(root->left, name, depth);
    else
        return fineSearch(root->right, name, depth);
}

int fineHeight(FineNode* root) {
    if (root == NULL)
        return -1;
    int leftHeight = fineHeight(root->left);
    int rightHeight = fineHeight(root->right);
    return ((leftHeight > rightHeight) ? leftHeight : rightHeight) + 1;
}

void calcAverageFine(FineNode* root, int* totalFine, int* totalOwners) {
    if (root == NULL)
        return;
    *totalFine += root->fine;
    (*totalOwners)++;
    calcAverageFine(root->left, totalFine, totalOwners);
    calcAverageFine(root->right, totalFine, totalOwners);
}

int calcTotalBelowFine(FineNode* root, char* name) {
    if (root == NULL)
        return 0;
    int total = 0;
    if (strcmp(root->name, name) <= 0) {
        total += root->fine;
        total += calcTotalBelowFine(root->left, name);
        total += calcTotalBelowFine(root->right, name);
    } else {
        total += calcTotalBelowFine(root->left, name);
    }
    return total;
}

void freeFineTree(FineNode* root) {
    if (root == NULL)
        return;
    freeFineTree(root->left);
    freeFineTree(root->right);
    free(root);
}

FineNode* fineFindNode(FineNode* current_ptr, char* name) {
    if (current_ptr != NULL) {
        if (strcmp(current_ptr->name, name) == 0)
            return current_ptr;
        if (strcmp(name, current_ptr->name) < 0)
            return fineFindNode(current_ptr->left, name);
        else
            return fineFindNode(current_ptr->right, name);
    }
    return NULL;
}

FineNode* fineParent(FineNode* root, FineNode* node) {
    if (root == NULL || root == node)
        return NULL;
    if (root->left == node || root->right == node)
        return root;
    if (strcmp(node->name, root->name) < 0)
        return fineParent(root->left, node);
    else if (strcmp(node->name, root->name) > 0)
        return fineParent(root->right, node);
    return NULL;
}

int isLeafFine(FineNode* node) {
    return (node->left == NULL && node->right == NULL);
}

int hasOnlyLeftChildFine(FineNode* node) {
    return (node->left != NULL && node->right == NULL);
}

int hasOnlyRightChildFine(FineNode* node) {
    return (node->left == NULL && node->right != NULL);
}

FineNode* fineMaxVal(FineNode* root) {
    if (root == NULL)
        return NULL;
    if (root->right == NULL)
        return root;
    else
        return fineMaxVal(root->right);
}

FineNode* fineDelete(FineNode* root, char* name) {
    FineNode *delnode, *new_del_node;
    FineNode *par;
    
    delnode = fineFindNode(root, name);
    if (delnode == NULL)
        return root;
    par = fineParent(root, delnode);
    
    if (isLeafFine(delnode)) {
        if (par == NULL) {
            free(delnode);
            return NULL;
        }
        if (par->left == delnode) {
            free(delnode);
            par->left = NULL;
        } else {
            free(delnode);
            par->right = NULL;
        }
        return root;
    }
    
    if (hasOnlyLeftChildFine(delnode)) {
        if (par == NULL) {
            FineNode* temp = delnode->left;
            free(delnode);
            return temp;
        }
        if (par->left == delnode)
            par->left = delnode->left;
        else
            par->right = delnode->left;
        free(delnode);
        return root;
    }
    
    if (hasOnlyRightChildFine(delnode)) {
        if (par == NULL) {
            FineNode* temp = delnode->right;
            free(delnode);
            return temp;
        }
        if (par->left == delnode)
            par->left = delnode->right;
        else
            par->right = delnode->right;
        free(delnode);
        return root;
    }
    
    // Two children: replace with max node from left subtree
    new_del_node = fineMaxVal(delnode->left);
    strcpy(delnode->name, new_del_node->name);
    delnode->fine = new_del_node->fine;
    delnode->left = fineDelete(delnode->left, new_del_node->name);
    return root;
}

/* ================= Campus Parking System ================= */
typedef struct RegisteredVehicle {
    char* license_plate; // License plate string
    char* owner_name;    // Owner name string
} RegisteredVehicle;

typedef struct Garage {
    char* garage_name;           // Garage name string
    int total_capacity;          // Total capacity of the garage
    int current_count;           // Number of parked vehicles
    RegisteredVehicle** parked_vehicles; // Array of pointers to parked vehicles
} Garage;

typedef struct Campus {
    Garage** garages;                    // Array of pointers to garages
    int total_garages;                   // Number of garages on campus
    RegisteredVehicle** registered_vehicles; // Array of pointers to registered vehicles
    int total_registered_vehicles;       // Number of registered vehicles
    FineNode* fineRoot;                  // BST for fines
} Campus;

/* Function Prototypes for Parking System */
Garage* createGarage(const char* name, int capacity);
RegisteredVehicle* createRegisteredVehicle(const char* license, const char* owner);
void registerVehicle(Campus* campus, const char* license, const char* owner);
void parkVehicle(Garage* garage, RegisteredVehicle* vehicle);
int removeVehicleFromGarage(Garage* garage, const char* license);
RegisteredVehicle* searchVehicleByLicense(const Campus* campus, const char* license);
int countTotalVehicles(const Campus* campus);
int resizeGarage(Garage* garage, int new_capacity);
int relocateVehicle(Campus* campus, const char* license, const char* target_garage_name);
void displayVehiclesByOwner(const Campus* campus, const char* owner_name);
int removeGarage(Campus* campus, const char* garage_name);
void generateGarageUtilizationReport(const Campus* campus);
void freeCampus(Campus* campus);

/* Function Implementations for Parking System */
Garage* createGarage(const char* name, int capacity) {
    Garage* g = (Garage*)malloc(sizeof(Garage));
    g->garage_name = (char*)malloc(strlen(name) + 1);
    strcpy(g->garage_name, name);
    g->total_capacity = capacity;
    g->current_count = 0;
    g->parked_vehicles = (RegisteredVehicle**)malloc(capacity * sizeof(RegisteredVehicle*));
    return g;
}

RegisteredVehicle* createRegisteredVehicle(const char* license, const char* owner) {
    RegisteredVehicle* rv = (RegisteredVehicle*)malloc(sizeof(RegisteredVehicle));
    rv->license_plate = (char*)malloc(strlen(license) + 1);
    strcpy(rv->license_plate, license);
    rv->owner_name = (char*)malloc(strlen(owner) + 1);
    strcpy(rv->owner_name, owner);
    return rv;
}

void registerVehicle(Campus* campus, const char* license, const char* owner) {
    int newCount = campus->total_registered_vehicles + 1;
    RegisteredVehicle** temp = (RegisteredVehicle**)realloc(campus->registered_vehicles, newCount * sizeof(RegisteredVehicle*));
    campus->registered_vehicles = temp;
    campus->registered_vehicles[campus->total_registered_vehicles] = createRegisteredVehicle(license, owner);
    campus->total_registered_vehicles = newCount;
    printf("REGISTERED\n");
}

void parkVehicle(Garage* garage, RegisteredVehicle* vehicle) {
    if (garage->current_count >= garage->total_capacity) {
        printf("FULL\n");
        return;
    }
    garage->parked_vehicles[garage->current_count] = vehicle;
    garage->current_count++;
    printf("PARKED\n");
}

int removeVehicleFromGarage(Garage* garage, const char* license) {
    for (int i = 0; i < garage->current_count; i++) {
        if (strcmp(garage->parked_vehicles[i]->license_plate, license) == 0) {
            for (int j = i; j < garage->current_count - 1; j++) {
                garage->parked_vehicles[j] = garage->parked_vehicles[j + 1];
            }
            garage->current_count--;
            return 1;
        }
    }
    return 0;
}

RegisteredVehicle* searchVehicleByLicense(const Campus* campus, const char* license) {
    for (int i = 0; i < campus->total_registered_vehicles; i++) {
        if (strcmp(campus->registered_vehicles[i]->license_plate, license) == 0)
            return campus->registered_vehicles[i];
    }
    return NULL;
}

int countTotalVehicles(const Campus* campus) {
    int total = 0;
    for (int i = 0; i < campus->total_garages; i++) {
        total += campus->garages[i]->current_count;
    }
    return total;
}

int resizeGarage(Garage* garage, int new_capacity) {
    if (new_capacity < garage->current_count) {
        printf("FAIL. TOO SMALL TO ACCOMMODATE EXISTING VEHICLES.\n");
        return 0;
    }
    RegisteredVehicle** temp = (RegisteredVehicle**)realloc(garage->parked_vehicles, new_capacity * sizeof(RegisteredVehicle*));
    garage->parked_vehicles = temp;
    garage->total_capacity = new_capacity;
    printf("SUCCESS\n");
    return 1;
}

int relocateVehicle(Campus* campus, const char* license, const char* target_garage_name) {
    Garage* targetGarage = NULL;
    for (int i = 0; i < campus->total_garages; i++) {
        if (strcmp(campus->garages[i]->garage_name, target_garage_name) == 0) {
            targetGarage = campus->garages[i];
            break;
        }
    }
    if (targetGarage == NULL) {
        printf("%s NOT FOUND\n", target_garage_name);
        return 0;
    }
    Garage* currentGarage = NULL;
    for (int i = 0; i < campus->total_garages; i++) {
        for (int j = 0; j < campus->garages[i]->current_count; j++) {
            if (strcmp(campus->garages[i]->parked_vehicles[j]->license_plate, license) == 0) {
                currentGarage = campus->garages[i];
                break;
            }
        }
        if (currentGarage)
            break;
    }
    if (currentGarage == NULL) {
        printf("%s NOT IN CAMPUS\n", license);
        return 0;
    }
    if (targetGarage->current_count >= targetGarage->total_capacity) {
        printf("[%s] IS FULL.\n", targetGarage->garage_name);
        return 0;
    }
    removeVehicleFromGarage(currentGarage, license);
    parkVehicle(targetGarage, searchVehicleByLicense(campus, license));
    printf("RELOCATION SUCCESSFUL\n");
    return 1;
}

void displayVehiclesByOwner(const Campus* campus, const char* owner_name) {
    int found = 0;
    for (int i = 0; i < campus->total_registered_vehicles; i++) {
        if (strcmp(campus->registered_vehicles[i]->owner_name, owner_name) == 0) {
            found = 1;
            RegisteredVehicle* vehicle = campus->registered_vehicles[i];
            char* parkedGarage = NULL;
            for (int j = 0; j < campus->total_garages; j++) {
                for (int k = 0; k < campus->garages[j]->current_count; k++) {
                    if (strcmp(campus->garages[j]->parked_vehicles[k]->license_plate, vehicle->license_plate) == 0) {
                        parkedGarage = campus->garages[j]->garage_name;
                        break;
                    }
                }
                if (parkedGarage)
                    break;
            }
            if (parkedGarage)
                printf("%s %s\n", vehicle->license_plate, parkedGarage);
            else
                printf("%s NOT ON CAMPUS\n", vehicle->license_plate);
        }
    }
    if (!found)
        printf("NO REGISTERED CAR BY THIS OWNER\n");
}

int removeGarage(Campus* campus, const char* garage_name) {
    for (int i = 0; i < campus->total_garages; i++) {
        if (strcmp(campus->garages[i]->garage_name, garage_name) == 0) {
            free(campus->garages[i]->garage_name);
            free(campus->garages[i]->parked_vehicles);
            free(campus->garages[i]);
            for (int j = i; j < campus->total_garages - 1; j++) {
                campus->garages[j] = campus->garages[j + 1];
            }
            campus->total_garages--;
            printf("%s REMOVED\n", garage_name);
            return 1;
        }
    }
    printf("%s NOT FOUND\n", garage_name);
    return 0;
}

void generateGarageUtilizationReport(const Campus* campus) {
    double minUtil = 101.0;
    int minIndex = -1;
    for (int i = 0; i < campus->total_garages; i++) {
        Garage* g = campus->garages[i];
        double util = ((double)g->current_count / g->total_capacity) * 100.0;
        printf("Garage: %s, Capacity: %d, Occupied: %d, Utilization: %.2f%%\n",
               g->garage_name, g->total_capacity, g->current_count, util);
        if (util < minUtil) {
            minUtil = util;
            minIndex = i;
        }
    }
    if (minIndex != -1)
        printf("Least Utilized: %s\n", campus->garages[minIndex]->garage_name);
}

void freeCampus(Campus* campus) {
    for (int i = 0; i < campus->total_garages; i++) {
        free(campus->garages[i]->garage_name);
        free(campus->garages[i]->parked_vehicles);
        free(campus->garages[i]);
    }
    free(campus->garages);
    for (int i = 0; i < campus->total_registered_vehicles; i++) {
        free(campus->registered_vehicles[i]->license_plate);
        free(campus->registered_vehicles[i]->owner_name);
        free(campus->registered_vehicles[i]);
    }
    free(campus->registered_vehicles);
}

/* ================= Garage Sorting Functions (by Name) ================= */
int compareGarageName(const Garage* a, const Garage* b) {
    return strcmp(a->garage_name, b->garage_name);
}

void insertionSortGarages(Garage** arr, int left, int right) {
    for (int i = left + 1; i <= right; i++) {
        Garage* key = arr[i];
        int j = i - 1;
        while (j >= left && compareGarageName(arr[j], key) > 0) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void mergeGarages(Garage** arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    Garage** L = (Garage**)malloc(n1 * sizeof(Garage*));
    Garage** R = (Garage**)malloc(n2 * sizeof(Garage*));
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (compareGarageName(L[i], R[j]) <= 0)
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }
    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
    free(L);
    free(R);
}

void mergeSortGarages(Garage** arr, int left, int right, int t) {
    if (left < right) {
        if (right - left + 1 <= t) {
            insertionSortGarages(arr, left, right);
        } else {
            int mid = left + (right - left) / 2;
            mergeSortGarages(arr, left, mid, t);
            mergeSortGarages(arr, mid + 1, right, t);
            mergeGarages(arr, left, mid, right);
        }
    }
}

/* ================= Main ================= */
int main() {
    int g, v, c;
    scanf("%d %d %d", &g, &v, &c);
    
    Campus campus;
    campus.total_garages = g;
    campus.total_registered_vehicles = v;
    campus.fineRoot = NULL;
    
    campus.garages = (Garage**)malloc(g * sizeof(Garage*));
    campus.registered_vehicles = (RegisteredVehicle**)malloc(v * sizeof(RegisteredVehicle*));
    
    char buffer[30];
    int capacity;
    // Read garage information: garage_name total_capacity
    for (int i = 0; i < g; i++){
        scanf("%s %d", buffer, &capacity);
        campus.garages[i] = createGarage(buffer, capacity);
    }
    
    char license[30], owner[30];
    // Read registered vehicle information
    for (int i = 0; i < v; i++){
        scanf("%s %s", license, owner);
        campus.registered_vehicles[i] = createRegisteredVehicle(license, owner);
    }
    
    /* Process commands */
    char command[30];
    for (int i = 0; i < c; i++){
        scanf("%s", command);
        
        if (strcmp(command, "PARK") == 0) {
            // Command: PARK <LP> <G>
            scanf("%s %s", license, buffer); // buffer holds garage name
            Garage* target = NULL;
            for (int j = 0; j < campus.total_garages; j++){
                if (strcmp(campus.garages[j]->garage_name, buffer) == 0){
                    target = campus.garages[j];
                    break;
                }
            }
            RegisteredVehicle* vehicle = searchVehicleByLicense(&campus, license);
            if (target && vehicle) {
                if (target->current_count >= target->total_capacity)
                    printf("FULL\n");
                else
                    parkVehicle(target, vehicle);
            }
        }
        else if (strcmp(command, "UTILIZATION_REPORT") == 0) {
            generateGarageUtilizationReport(&campus);
        }
        else if (strcmp(command, "RESIZE") == 0) {
            // Command: RESIZE <G> <nc>
            int newCap;
            scanf("%s %d", buffer, &newCap);
            Garage* target = NULL;
            for (int j = 0; j < campus.total_garages; j++){
                if (strcmp(campus.garages[j]->garage_name, buffer) == 0){
                    target = campus.garages[j];
                    break;
                }
            }
            if (target)
                resizeGarage(target, newCap);
        }
        else if (strcmp(command, "SEARCH_OWNER") == 0) {
            scanf("%s", owner);
            displayVehiclesByOwner(&campus, owner);
        }
        else if (strcmp(command, "RELOCATE") == 0) {
            scanf("%s %s", license, buffer);
            relocateVehicle(&campus, license, buffer);
        }
        else if (strcmp(command, "COUNT_TOTAL") == 0) {
            printf("%d\n", countTotalVehicles(&campus));
        }
        else if (strcmp(command, "REGISTER_VEHICLE") == 0) {
            scanf("%s %s", license, owner);
            registerVehicle(&campus, license, owner);
        }
        else if (strcmp(command, "REMOVE_VEHICLE_GARAGE") == 0) {
            scanf("%s", license);
            int found = 0;
            for (int j = 0; j < campus.total_garages; j++){
                if (removeVehicleFromGarage(campus.garages[j], license)) {
                    printf("REMOVED FROM %s\n", campus.garages[j]->garage_name);
                    found = 1;
                    break;
                }
            }
            if (!found)
                printf("NOT FOUND IN CAMPUS\n");
        }
        else if (strcmp(command, "REMOVE_GARAGE") == 0) {
            scanf("%s", buffer);
            removeGarage(&campus, buffer);
        }
        else if (strcmp(command, "SORT_GARAGES") == 0) {
            // Command: SORT_GARAGES <t>
            int t;
            scanf("%d", &t);
            mergeSortGarages(campus.garages, 0, campus.total_garages - 1, t);
            // Print sorted garages: name and capacity
            for (int j = 0; j < campus.total_garages; j++){
                printf("%s %d\n", campus.garages[j]->garage_name, campus.garages[j]->total_capacity);
            }
        }
        /* Fine Management Commands */
        else if (strcmp(command, "FINE_ADD") == 0) {
            int fineAmount, depth = 0;
            scanf("%s %d", owner, &fineAmount);
            FineNode* node = fineSearch(campus.fineRoot, owner, &depth);
            if (node != NULL) {
                node->fine += fineAmount;
                printf("%s %d %d\n", node->name, node->fine, depth);
            } else {
                depth = 0;
                campus.fineRoot = fineInsert(campus.fineRoot, owner, fineAmount, &depth);
                printf("%s %d %d\n", owner, fineAmount, depth);
            }
        }
        else if (strcmp(command, "FINE_DEDUCT") == 0) {
            int fineAmount, depth = 0;
            scanf("%s %d", owner, &fineAmount);
            FineNode* node = fineSearch(campus.fineRoot, owner, &depth);
            if (node == NULL)
                printf("%s not found\n", owner);
            else {
                if (node->fine <= fineAmount) {
                    campus.fineRoot = fineDelete(campus.fineRoot, owner);
                    printf("%s removed\n", owner);
                } else {
                    node->fine -= fineAmount;
                    printf("%s %d %d\n", owner, node->fine, depth);
                }
            }
        }
        else if (strcmp(command, "FINE_SEARCH") == 0) {
            int depth = 0;
            scanf("%s", owner);
            FineNode* node = fineSearch(campus.fineRoot, owner, &depth);
            if (node != NULL)
                printf("%s %d %d\n", node->name, node->fine, depth);
            else
                printf("%s not found\n", owner);
        }
        else if (strcmp(command, "FINE_AVERAGE") == 0) {
            int totalFine = 0, totalOwners = 0;
            calcAverageFine(campus.fineRoot, &totalFine, &totalOwners);
            if (totalOwners == 0)
                printf("0.00\n");
            else {
                double average = (double)totalFine / totalOwners;
                printf("%.2f\n", average);
            }
        }
        else if (strcmp(command, "FINE_HEIGHT_BALANCE") == 0) {
            int leftHeight = -1, rightHeight = -1;
            if (campus.fineRoot != NULL) {
                leftHeight = fineHeight(campus.fineRoot->left);
                rightHeight = fineHeight(campus.fineRoot->right);
            }
            printf("left height = %d right height = %d ", leftHeight, rightHeight);
            if (leftHeight == rightHeight)
                printf("balanced\n");
            else
                printf("not balanced\n");
        }
        else if (strcmp(command, "FINE_CALC_BELOW") == 0) {
            scanf("%s", owner);
            int total = calcTotalBelowFine(campus.fineRoot, owner);
            printf("%d\n", total);
        }
    }
    
    /* Free allocated memory */
    freeCampus(&campus);
    freeFineTree(campus.fineRoot);
    
    return 0;
}
